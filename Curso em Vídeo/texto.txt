!ESTE É UM ARQUIVO QUE PODES USAR ENQUANTO ESCREVE TEXTOS, COMO UM ATALHO!

* < % $ = +

Listas:

Listas são mutáveis, os valores da lista devem ser armazenados dentro
    de colchetes, diferente de tuplas.

Ferreamentas:

    Inserção:
        list.append(item)
            Adiciona um valor ao final da lista.
        
        list.insert(index, item)
            Adiciona um item numa posição específica.

    !Se_a_posicao_para_inserir_seja_falsa_ocorrera_um_erro. 
    
    Remoção:
        del list[index]
            Deleta um item da lista por índice.

        list.pop(index)
            O mesmo uso do del, porém esta é uma função. E quanto está sem
                index, remove o último valor.

        list.remove(item)
            Remove o primeiro de um item pelo valor especificado.

    !Se_o_valor_para_deletar_for_falso_ocorrera_um_erro.

    Criação de lista:
        name = list(range(0,10)) =
            name = [0,1,2,3,4,5,6,7,8,9]

    Organização:
        list.sort()
            Organizará do menor para o maior
        
        list.sort(reverse=True)
            Organizará do maior para o menor
        
        !Não fúnciona dentro do print

    Listagem:
        len(list)
            Diz quantos itens tem na lista
        
        enumerate em for:
            for c, v in enumerate(list):
                Primeira variável recebe o índice do valor e a segunda o valor

Se copiarmos uma lista com [lista = listb] ela crará uma ligação. Então quando mudarmos uma,
    a outra tambpem mudará.

    A forma correta é lista = listb[:]

Exercícios:

ex078:
    Faça um programa que leia 5 valores númericos e guarde-os em uma lista.

    No final, mostre qual foi o maior e o menor valor digitado e as suas
        respectivas posições na lista.

ex079:
    ...onde o usuário possa digitar vários valores númericos e cadastre-os
        em uma lista. Caso o número já exista lá dentro, ele não será
            adicionado. No final serão exibidos todos os valores únicos
                digitados, em ordem crescente.

ex080:
    ...onde o usuário possa digitar cinco valores númericos e cadastre-os
        em uma lista. Já na posição correta de inserção (sem usar o sort())

        No final, mostre a lista ordenada na tela.

ex081:
    ...vai ler vários númericos e colocar numa lista.

    Depois disso mostre:

        a) Quantos números foram digitadods.
        b) A lista de valores, ordenada de forma decrescente.
        c) Se o valor 5 foi digitado e está ou não na lista.

ex082:
    ...Depois disso, crie duas listas extras que vão conter apenas os
        valores pares e os ímpares digitados, respectivamente.

        Ao final mostre o contéudo das três listas geradas

ex083:
    ...o usuário digita uma expressão qualquer que use parentêses. Seu
        aplicativo deverá analisar se a expressão passada está com os
            parentêses abertos e fechados na ordem correta

end.

Listas (Parte 2):

Nesta aula veremos listas dentro de listas como no exemplo abaixo.

lista = [['João', 19], ['Maria', 24], ['Gustavo', 35]]

Podemos buscar seus valores de algumas formas;

list[0][0] == 'João';
list[2],[1]  == 35;
list[1] == ['Maria', 24];

Exercícios:

ex084:

    Faça im programa que leia nome e peso de várias pessoas, guardando
        tudo em uma lista. No final mostre:

            A) Quantas pessoas foram cadastradas.
            B) Uma listagem com as pessoas mais pesadas.
            C) Uma listagem com as pessoas mais leves.

Tuplas:

Tuplas em python podem armazenar diferentes tipos de valores
    de uma só vez dentro de parenteses.
Tuplas são imutáveis. O que significa que não podemos:
    adicionar, remover, alterar itens

tupla.count(item) = Mostra quantas vezes o item aparece na tupla

Tupla.index(item, posição a começar procura) = Mostra em qual
    posição o item está

del(item) apaga qualquer item, seja variável, ou listas

Exercícios:

ex072:
Crie um programa que tenha uma tupla totalmente preenchida
    com uma contagem por extenso de zero até vinte.

    Seu programa deverá ler um número pelo teclado
        (entre 0 e 20) e mostrá-lo por extenso.

ex073:
    Crie uma tupla preenchida com os 20 primeiros colocados da
        tabela da CBF, na ordem de colocação. Depois mostre:

        A) Apenas os 5 primeiros colocados.
        B) Os últimos colocados da tabela.
        C) Uma lista com os times em ordem alfabética.
        D) Em que posição na tabela está Chapecoense.

ex074:
    Crie um programa que vai gerar cinco números aleatórios
        e colocar em uma tupla.

        Depois disso, mostre a listagem de números gerados
            e também indique o menor e o maior valor que estão
                na tupla.

ex075:
    Desenvolva um programa que leia quatro valores pelo teclado
        e guarde-os em uma tupla. No final mostre:

        A) Quantas vezes o valor 9 apareceu.
        B) Em que posição foi digitado o primeiro valor 3.
        C) Quais foram os números pares.

ex076:
    Crie um programa que tenha uma tupla única com nomes de
        produtos e seus respectivos preços, na sequência.

        No final, mostre uma listagem de preços organizando os
        dados e forma tabular.

ex077:
    Crie um programa que tenha um tupla com várias palavras
        (sem acentos). Depois disso, você deve mostrar, para
            cada palavra, quais são as suas vogais.

end.

desafios:

Desafio 66: v
    Crie um programa que leia vários números inteiros pelo teclado.
        O programa só vai parar quando o usuário digitar o valor 999,
            que é a condição de parada. No final, mostre quantos números
                foram digitados e qual foi a soma entre eles.
                    (Desconsiderando o flag);

Desafio 67: v
    Que mostre a tabuada de vários números, um de cada vez
        para cada valor digitado pelo usuário. O programa seá interrompido
            quando o número for negativo;

Desafio 68: v
    Que jogue par ou ímpar com o computador. O jogo só será interrompido
        quando o jogador perder, mostrando o total de vitórias consecutivas
            que ele conquistou ao final do jogo;

Desafio 69: v
    Que leia a idade de várias pessoas. A cada pessoa cadastrada, o programa
        deverá perguntar se o usaário quer ou não continuar. No final, mostre:
            
            A) Quantas pessoas tem mais de 18 anos;
            B) Quantos homens foram cadastrados;
            C) Quantas mulhers tem menos de 20 anos;

Desafio 70: v
    Que leia o preço de vários produtos. O programa deverá perguntar se
        o usuário vai continuar. No final, mostre:

            A) Qual é o total gasto na compra;
            B) Quantos produtos custam mais de R$1000;
            C) Qual é o nome do produto mais barato;

Desafio 71:
    Que simule o funcionamento de um caixa eletrônico, no início, pergunte
        ao usuário qual será o valor sacado (número inteiro) e o programa vai
         informar quantas cédulas de cada valor serão entregues.

            OBS: Considere que o caixa possui cédulas de R$50, R$20, R$10 e R$1.

Estrutura de repetição while
    (laços de repetição 2)

While serve para quando não há um número exato, ou um limite exato.
    o comando vai se repetir até que algo aconteça
        ou 'enquanto' aquele comando for verdadeiro.

Exercícios:

ex057: v
Faça um programa que leia o sexo de uma pessoa,
    mas só aceite 'm' ou 'f'. Caso esteja errado,
        peça a digitação novamente até ter um valor
            correto.

ex058: v
Melhore o jogo do 'desafio 028' onde p computador vai "pensar"
    num número entre 0 e 10. Só que agora o jogador vai tentar
        adivinhar até acertar, mostrando no final quantos palpites
            foram necessários para vencer.

ex059: v
Crie um programa que leia dois valores e mostre um menu na tela:
    [1]somar
    [2]multiplicar
    [3]maior
    [4]novos números
    [5]sair do programa
Seu programa deverá realizar a operação solicitada em cada caso.

ex060: v
Faça um programa que leia um número qualquer e mostre seu fatorial.
    ex: 5! = 5x4x3x2x1 = 120.

ex061: v
Refaça o desafio 51, lendo o primeiro termo e a razão de uma PA,
    mostrando os 10 primeiros termos da progressão aritmética
        usando while.

ex062: v
Melhore o desafio 61, perguntando para o usuário se ele quer
    continuar mostrando termos, e a quantidade de termos desejada.
        O programa encerra se ele escolher 0 termos.

ex063: v
Escreva um programa que leia um número 'n' inteiro qualquer e
    mostre na tela os 'n' primeiros elementos de uma "sequência fibonacci".

ex064: v
Crie um programa que leia vários números inteiros pelo teclado.
    o programa só vai parar quando o usuário digitar '999',
        que é a condição de parada. No final, mostre quantos números
            foram digitados e a soma entre eles.
                (desconsiderando o flag(999).

ex065: v
Crie um programa que leia vários números inteiros pelo teclado.
    No final da execução mostre a média entre todos os valores e
        qual foi o maior e o menor dos valores lidos. O programa
            deve perguntar se o usuário deseja ou não continuar.

Estruturas de repetição for

For c in range(0, 3)
    passo
pega

for in c range (0, 3)
    if coin
        pega
    passo
pega

exercícios:

ex046: v
 Faça um programa que mostre uma contagem regressiva para o
    estouro de fogos de artifícios. Indo de de 10 até 0,
    com uma pausa de 1 segundo entre eles.

ex047: v
 que mostre na tela todos números pares entre 1 e 50.

ex048: v
 que calcule a soma entre todos os números ímpares que são múltiplos
    de três e que se encontram no intervalo de 1 até 500.

ex049: v
 Refaça o desafio 009, mostrando a tabuada de um número que
    o usuário escolher, só que agora utilizando laço for.

ex050: v
 que leia 6 números inteiros e mostre a soma apenas daqueles que forem pares,
    se o valor digitado  for ímpar desconsidere-o.

ex051: v
  Desenvolva um programa que leia o primeiro termo e a razão de uma PA.
    No final, mostre os 10 primeiros termos dessa progressão.

ex052: v
que leia um número inteiro e diga se ele é ou não primo.

ex053: v
que leia uma frase qualquer e diga se ela é um palíndromo,
    desconsiderando os espaços.

ex054: v
que leia o ano de nascimento de 7 pessoas. No final, mostre
     quantas pessoas não atingiram a maioridade e quantas já são maiores.

ex055: v
que leia o peso de 5 pessoas e no final, mostre qual foi
    o maior e o menor pesos lidos.

ex056:
que leia o nome, idade e sexo de 4 pessoas. No final do programa mostre:
    A média de idade do grupo.
        Qual é o nome do homem mais velho.
            Quantas mulheres tem menos de 20.

desafios:

Desafio 66: v
    Crie um programa que leia vários números inteiros pelo teclado.
        O programa só vai parar quando o usuário digitar o valor 999,
            que é a condição de parada. No final, mostre quantos números
                foram digitados e qual foi a soma entre eles.
                    (Desconsiderando o flag);

Desafio 67: v
    Que mostre a tabuada de vários números, um de cada vez
        para cada valor digitado pelo usuário. O programa seá interrompido
            quando o número for negativo;

Desafio 68: v
    Que jogue par ou ímpar com o computador. O jogo só será interrompido
        quando o jogador perder, mostrando o total de vitórias consecutivas
            que ele conquistou ao final do jogo;

Desafio 69: v
    Que leia a idade de várias pessoas. A cada pessoa cadastrada, o programa
        deverá perguntar se o usaário quer ou não continuar. No final, mostre:
            
            A) Quantas pessoas tem mais de 18 anos;
            B) Quantos homens foram cadastrados;
            C) Quantas mulhers tem menos de 20 anos;

Desafio 70: v
    Que leia o preço de vários produtos. O programa deverá perguntar se
        o usuário vai continuar. No final, mostre:

            A) Qual é o total gasto na compra;
            B) Quantos produtos custam mais de R$1000;
            C) Qual é o nome do produto mais barato;

Desafio 71:
    Que simule o funcionamento de um caixa eletrônico, no início, pergunte
        ao usuário qual será o valor sacado (número inteiro) e o programa vai
         informar quantas cédulas de cada valor serão entregues.

            OBS: Considere que o caixa possui cédulas de R$50, R$20, R$10 e R$1.

Módulos servem para aprimorar a sua programação.
o programa vem com o básico. E você pode adicionar biblioteca
o python vem com bibliotecas limitadas, para otimizar o código
para incluir alguma biblioteca use o comando

IMPORT e o nome da biblioteca que voê adicionou

e quando importar, se quiser apenas usar uma função daquela biblioteca use

from/library/import/function name. Like: floor, ceil

essas são duas maneiras básicas de importar módulos no python
um módulo muito utilizado no python é a MATH(math)
o python já vem com o básico, como alguns operadores de matemática.

com a função math dá para arredondar para cima e para baixo:
math(ceil): arredonda para cima
        (floor): arredonda para baixo
             (trunc): elimina os números depois da vírgula, sem arredonda (truncar)
                  (pow): calcula potência, como os dois asteriscos **
                     (sqrt);{square root}: Calcula raiz quadrada
                         (factorial): função factorial

se você apenas usar: import math, você vai importar tudo
se quiser apenas um comando, como a raiz quadrada e potência por exemplo use:
from/ math/ import: sqrt, pow

se você digitar import e ctrl+space, dá pra ver todas as bibliotecas que já vem
junto com o python. E no site oficial, dá pra ver a biblioteca em docs,
e também uma aba chamada "PyPi" (python package index), que é o índice
de pacote extras, um programador pode criar uma library e disponibilizar
no site oficial

Quando você não tiver uma library instalada ela dará erro ao importar,
 você pode clicar na lampada que aparecerá ao lado dela, e clique em
  install package

desafios tc008:

ex.16:
crie um programa que leia um número real qualquer pelo teclado
e mostre na tela a sua porção inteira.
ex: digite um número:6.127
O número (6.127) tem a parte inteira de 6

ex.17:
[...] que leia o cumprimento do cateto oposto e do cateto adjacente
de um triângulo retângulo. calcule e mostre o comprimento da hipotenusa

ex.18:
[...] que leia um ângulo qualquer e mostre na tela o valor do
seno cosseno e tangente desse ângulo

ex.19:
Um professor quer sortear um de seus quatro alunos para apagar
o quadro. Faça um programa que ajude ele, lendo o nome deles
e escrevendo o nome do escolhido

ex.20:
O mesmo professor do desafio anterior quer sortear a ordem de
apresentação de trabalhos dos alunos. Faça um programa que
leia o nome dos quatro alunos e mostre a ordem sorteada

ex.21:
[...] em Python que abra e reproduza o áudio de um arquivo MP3

Manipulando Texto Str.
Manipulando cadeias de caracteres.

uma frase para linguagens de programação é uma cadeia de caractere ou
uma string ou até cadeia de palavras.

frase = curso em video: quando formamos uma cadeia de caracteres numa variável
o python guarda a informação em forma de cadeia, separando cada letra e espaço
dentro de mini células e enumerando-as, de 0 para cima.

operações possíveis:

funções de fatiamento: seleciona uma parte da frase.
ex:
frase[9] (o simbolo de colchete é o identificador de lista).

se você selecionar frase[9:13], o ultimo número não entra na contagem, ou seja,
  mostra apenas até a letra do número anterior
    ex: frase[9:27], só vai aparecer até o caractere de número 26
      e quando quiser ir até  último caractere,
         deve colocar um número a frente do que é o último
           ex: se a frase terminar em 20 caracteres, então 21 deve ser o número digitado
outro fragmento é frase[0:14:2], dessa forma serão digitadas de duas em duas palavras
                [0,1,2,3,4,5,6,7,8,9,0,1,2,3,]
    dessa forma [c,u,r,s,o, ,e,m, ,v,i,d,e,o,]
                [c,x,r,x,o,x,e,x, ,x,i,x,e,x,].

outras formas: frase[:5], com só o número da frente:
    ele começa no zero e vai até o 5.

frase[15:], sem caractere no fim:
    começa do caractere selecionado [15], e vai até o fim.

frase[9::3]:
    começa na selecionada e vai até o fim, pulando de 3 em 3.

funções de análise: analisa por exemplo:
    tamanho, quantidade de caractere, primeira palavra inteira.

.LEN (lens): len(frase)
    mede o comprimento, quantos caracteres a cadeia tem:
        ex: frase[c,u,r,s,o, ,e,m, ,v,i,d,e,o,]
            len(frase) = 14 caracteres
                e ela salva essa informação na memória.

.COUNT: conta a quantidade de uma informação especifica na string.
    ex:frase.count('o')
        (se não posta entre aspas, o python irá identificar como uma variável)
    e ele vai contar quantas vezes o 'o' aparece na string/cadeia
        outra forma é frase.count('o',0,13):
            (conta'o', de 0 até a 12).

.FIND: diz onde encontrou uma informação  e mostra sua posição dentro da str.
    ex: frase.find('deo')
        'deo' posição 11.

quando você põem uma informação que não existe no find, ele de dá o valor -1
    então ele valida as informações, se existir, mostra sua posição, se nao, -1
        está validando o erro
            ex: frase.find('android')
                find = -1.

in: é usado assim: infor/in/var
    primeiro a informação, então in, depois a variável onde deve procurar
        ex: 'curso' in frase.

Funções de transformação:
    frase.replace: procura uma informação dentro da str, e a substitui
        ex: frase,replace('python', 'android')
        >>> var,  replace('plvr1','plvr2).

.upper(): transforma uma str para letras maiúsculas
    ex: frase.upper() = [CURSO EM VIDEO].

.lower(): faz o contrário do comando upper, transformando os caracteres da str
    em letras letras minúsculas
        ex: frase.lower() = [curso em video].

.captalize(): transforma todos os caracteres da str em maiúsculo, exceto
    primeiro caractere.
        ex: frase.captalize() = [C,u,r,s,o, ,e,m, ,v,i,d,e,o,].

.title(): esse comando serve para contar quantas palavras uma str tem
    por meio da contagem de espaços e faz outro comando parecido com o captalize
        também diminuindo alguns caracteres, mas deixando em maiúscula
            todas as primeiras letras de cada palavra, assim como um título
     ex: frase.title() = [C,u,r,s,o, ,E,m, ,V,i,d,e,o,].

Agora com outra str, agora utilizando mais espaços:
    frase = [ , , ,A,p,r,e,n,d,a, ,P,y,t,h,o,n, , ,].

no mundo da tecnologia, é recorrente pessoas clicarem na caixa de dialogo
    e apertarem espaços algumas vezes para se certificarem de que está funcionando
        o que é ruim pois pode embaralhar o código ou provocar erros
            então o python e também outras linguagens, adicionaram funções
                para corrigirem essa irregularidade.

.strip(): remove todos os espaços desnecessários da str
    ex: frase.strip() = [x,x,x,A,p,r,e,n,d,a, ,P,y,t,h,o,n,x,x]
        ('x', são espaços cortados).

.rstrip(): r(right)strip, (muitas funções usam r para diferencia-lás)
    quando usada remove apenas os espaços desnecessários no fim da str,
        ou lado direito
            ex:frase.rstrip() = [ , , ,A,p,r,e,n,d,a, ,P,y,t,h,o,n,x,x].

.lstrip(): l(left)strip, basicamente o contrário de rstrip, agora removendo
    apenas os espaços da esquerda
        ex:frase.lstrip = [x,x,x,A,p,r,e,n,d,a, ,P,y,t,h,o,n, , ,].

Funções de divisão: para dividir strings.

.split(): o split é feito pelos espaços, dividindo por uma nova lista
    a cada parágrafo.
        ex: frase.split() = [C,u,r,s,o,] [e,m,] [v,i,d,e,o,]
            separou por três lista.

*Lembrar sempre de que no final de cada há (parenteses)*

Funções de junção:

.join(): junta diferentes listas em uma só, é utilizada da seguinte forma
    ''.join() : "caractere que vai aparecer na divisão de cada str"
        .join/(variável)
            ex: '-'.join(frase) = [C,u,r,s,o,-,e,m,-,v,i,d,e,o,].

                        ___  ___  ___  _____ _  ___  ___
                       |___||___||___|   |   | |    |___|
                       |    |  \ |   |   |   | |___ |   |.

22: Crie um programa que leia um nome completo de uma pessoa e mostre:
    > o nome com todas letras maiúsculas
        > com todas letras minúsculas
            > quantas letras ao todo(sem considerar espaços18.5)
                > quantas letras tem o primeiro nome.

23: ''''leia um número de 0 a 9999 e mostre na tela cada um dos dígitos separados.
    > ex: digite um número: 1834
        > unidade:4
            > dezena:3
                > centena:8
                    > milhar:1.

24:''''leia o nome de uma cidade e diga se ela começa ou não com o nome "santo".

25:''''leia o nome de uma pessoa e diga se ela tem "silva" no nome.

26:''''leia uma frase pelo teclado e mostre:
    > quantas vezes a letra 'A' aparece
        > em que posição ela aparece a primeira vez
            > em que posição ela aparece pela última vez

27:''''leia o nome completo de uma pessoa e mostre em seguida seu primeiro
    e último nome.
        > ex: Ana Maria de Souza
            > primeiro = Ana
                > último = Souza.

CORES NO TERMINAL

Padrão ANSI:

escape sequence
vamos utilizar para o terminal
tudo dentro de ansi começa com contra barra (\)

como ANSI funciona para cores
    o código que funciona melhor para python é: \033[
        e fechar o código com a letra m             \033[m
            entre o colchete e o 'M' é colocado a cor   \033['cor'm
                as cores são representadas por códigos
                    e as representações dentro desse espaço pode variar de 3 até 0 códigos
                    EX: com 3 códigos
            O primeiro que vamos usar é o 'style'/'text'/'back'
                então style: formatação do texto e fonte
                    text: qual a cor do texto
                        back: a cor de fundo do texto
            ::\033[style;text;backm
            ::\033[0;33;44m

        os códigos para estilo são: 0 (none)\ 1 (bold) \ 4 (underline) \ 7 (negative(switches))
            para text: 30 (white)\ 31 (red)\ 32 (green)\ 33 (yellow)\ 34 (blue)\ 35 (purple)\ 36 (cian)\ 37 (gray)
               e back: 40          41        42          43           44         45           46         47
                    a mesma mesma cor pela unidade só muda o decimal que é 40

Agora um teste: ver a formatação e escreve-lá em código

    0:\033[30;41m
    1:\033[4;33;44m
    2:\033[1;35;43m
    3:\033[30;42m
    4:\033[m
    5:\033[7;30m

    quando acor desejada for a a padrão não é necessário colocar nenhum digito
        o switch\negative vai de acordo com a sua cor padrão também

                                                    Agora Prática

                                                     Exercícios

adicionar cores nos programas já feitos

Listas (Parte 2):

Nesta aula veremos listas dentro de listas como no exemplo abaixo.

lista = [['João', 19], ['Maria', 24], ['Gustavo', 35]]

Podemos buscar seus valores de algumas formas;

list[0][0] == 'João';
list[2],[1]  == 35;
list[1] == ['Maria', 24];

Exercícios:

ex084:
    Faça im programa que leia nome e peso de várias pessoas, guardando
        tudo em uma lista. No final mostre:

            A) Quantas pessoas foram cadastradas.
            B) Uma listagem com as pessoas mais pesadas.
            C) Uma listagem com as pessoas mais leves.

ex085:
    Crie um programa onde o usuário sete valores númericos e cadastre-os
        em uma lista única que mantenha separados os valores pares e
            ímpares. No final, mostre os valores pares e ímpares em ordem
                crescente.

ex086:
    Crie uma matriz de dimensão 3x3 e preencha com valores lidos pelo 
        teclado. No final, mostre a matriz na tela com os valores e
            formatação correta.

ex087:
    aprimore o desafio anterior, mostrando no final:

        A) A soma de todos os valores pares digitados.
        B) A soma de todos os valores da terceira coluna.
        C) O maior valor da segunda linha.

ex088:
    ... que ajude um jogador da MEGA SENA a criar palpites. O programa
        vai perguntar quantos jogos serão gerados e vai sortear 6
            números entre 1 e 60 para cada jogo, cadastrando tudo em
                uma lista composta.

ex089:
    ... leia nomes e duas notas de vários alunos e guarde tudoem uma
        lista composta. No final, mostre um boletim contendoa média de
            cada um  e permita que o usuário possa mostrar as notas de 
                cada alunos individualmente

Dicionários:

Diconários em python são identificados pelas chaves '{}', ou dict()

Podemos usá-los desta forma: dict = {'nome': 'Pedro', 'idade': 25}
Agora não precisamos mais usar índice, podemos usar o identificador (keys)

print(dict['nome']) output: Pedro
print(dict['idade']) output: 25

!Nos dicionários append não funciona
!As chaves do dicionário podem ser alocadas em linhas diferentes

!Exemplos!

    filme = {
            'titulo':'Star Wars',
    keys: 'ano':1977,              :values
            'diretor':'George Lucas'
            }

    Podemos também colocar dicionários dentro de listas como:
        locadora = filmes

            print(locadora[0]['ano']) output: 1977

Ferreamentas:

    Inserir dados:
        dict['sexo'] = 'M'

            Desta forma inserimos uma nova chave 'sexo' com o valor 'M'
                então: , 'sexo': 'M'
        
        dict.copy():
            Copia um dicionário quando a intenção é não criar relação
                na hora de copiar.

                Exemplo:
                    locadora.append(filmes.copy())

    Remover	de dados:
        del dict['idade']

            Então a chave e o valor de 'idade' serão deletados.
    
    Exibição:
        dict.keys()
            print(filme.keys()) 
                output: 'titulo', 'ano', 'diretor'

        dict.values()  
            print(filme.values())
                output: 'Star Wars', 1977, 'George Lucas'

        dict.items()    
            print(filme.items())
                output: 'titulo':'Star Wars', 'ano':1977, 'diretor':'George Lucas'

                Neste podemos usar um for com duas variáveis para keys & values
                for k, v in filme.items():
                    print(f'O {k} é {v}')
                        output: O titulo é Star Wars
                                O ano é 1977
                                O Diretor é George Lucas

Exercícios:

ex090:
    Faça um programa que leia nome e média de um aluno, guardando
        também a situação (se o aluno está ou não aprovado)em um 
            dicionário. No final mostre o conteúdo da estrutura na tela.
        
        !$nome:; media de $nome:; 

ex091:
    ...onde 4 jogadores jogue um dado e tenham resultados aleatórios.
        Guarde esses resultados em um dicionário. No final, coloque
            esse dicionário emm ordem, sabendo que o vencedor tirou
                o maior número no dado.

ex092:
    ...nome, ano de nascimento e carteira de trabalho e cadastre-os
        (com idade) em um dicionário se por acaso a CTPS for diferente
            de zero, o dicionário receberá também o ano de contratação
                e o salário. Calcule e acrescente, além da idade, com
                    quantos anos a pessoa vai se aposentar.

ex093:
    ...gerencie o aproveitamento de um jogador de futebol. O programa
        vai ler o nome do jogador e quantas partidas ele jogou. depois
            a quantidade de gols feitos em cada partida. No final, tudo
                isso será guardado em um dicionário, incluindo o total
                    de gols feitos durante o campeonato.

ex094:
    ...nome, sexo e idade de várias pessoas, guardando os dados de cada
        pessoa em um dicionário e todos os dicionários em uma lista.
            No final, mostre:

                A) Quantas pessoas foram cadastradas.
                B) A média de idade do grupo.
                C) Uma lista com todas as mulheres.
                D) Uma lista com todas as pessoas comidade acima da média.

ex095:
    Aprimore o ex096 para que ele funcione com vários jogadores,
        incluindo um sistema de visualização de detalhes do 
        aproveitamento de cada jogador.

        !Ver como deve ser o output para os dois exercícios. Agora almoço

end.

Funções:

As funções servem para executar tarefas rotineiras
O python já tem funções inclusas, como print() ou len().

Elas devems ser escritas antes de que sejam chamadas.

Usabilidade:
    Quando você cria uma função com váriaveis, todos os campos
        devem ser especificados.

        def soma(a, b):
            soma = a + b
        
        soma(2, 5) Correto
        soma(2)/soma(2, 5, 3) Incorreto
    
        É possível trocar a ordem desta forma: soma(b=2, a=5)

    Se o valor inserido entre os parentêses for uma lista
    não é preciso empacotar.

    Empacotador:
        def soma(* kvar):
            print(var)
        
        Dessa forma será criada uma tupla com os valores
            inseridos entre os parentêses.
        
Exercícios:

ex096: v
    Faça um programa que tenha uma função chamada" área(), que receba
        as dimensões de um terreno retangular (largura e comprimento)
            e mostre a área do terreno.

ex097: v
    ... escreva(), que receba um texto qualquer como parâmetro e mostre
        uma mensagem com um tamanho adaptável.

            ex:
            escreva('Olá, Mundo!')

            saída:
            ---------------
              Olá, Mundo!
            ---------------

ex098: v
    ... contador() que receba três parâmetros: início, fim e passo, e
        realize a contagem.

            Seu programa tem que realizar três contagens através da
                função criada:

                    A) De 1 até 10, de 1 em 1.
                    B) De 10 aaté 0, de 2 em 2.
                    C) Uma contagem personalizada, onde o usuário diga a ordem.

ex099: v
    ... maior(), que receba vários parâmetros com valores inteiros.

        Seu programa tem que analisar todos os valores e dizer qual
            deles é o maior

ex100:
    ... tenha uma lista chamada números[] e duas funções chamadas:
        sortreio() e somaPar(). A primeria função vai sortear 5 números
            e vai coloca-los dentro de uma lista e a segunda função vai
                mostrar a soma entre todos os valores PARES sorteados
                    pela função anterior.

Exercícios:
    ex101:
        
end.

Funções 2:

Nesta aula verenos mais sobre as funções e funções que recebem valores

Info:
    Help(function):
        É uma função usada no console do python que pode fornecer informação
            sobre qualquer função, biblioteca, etc... do python.
            
    print(input.__doc__):
        Básicamente a mesma coisa.

    docstring:
        adcione no começo da sua função para oferecer um manual sobre 
            ela através do comando help() ou input.__doc__

Parâmetro opcional:
    quando criar uma função é possível incluir parâmetro opcional:

    def calc(a, b, c=0)
        dessa forma c é opcional. Então se não for preenchido receberá 0

Escopo de váriaveis:
    Escopo é o local onde a váriavel foi determinada.

    fora de funções:
        Global:
            Continua com seu valor e pode ser chamada em qualquer lugar.
            
            Não é possível alterar seu valor dentro de uma função.

            Se a denominação de uma váriavel global for repetida dentro 
                da função, será criada uma váriavel local de mesmo nome.
            
            Se dentro da função, escreveres global 'var', você estará
                informando para não criar outra váriavel. E sim usar
                    a já existente váriavel global.
        
    dentro de funções:
        Local:
            Só pode ser chamada na def em que foi criada

Return:
    Se uma função tiver return, é possível armazenar uma informação
     da def fora dela, numa variável ou diretamente num output.
        da seguinte forma:

            def soma(a, b):
                return a + b

            s = soma(1, 2) - output: 3
            print(soma(2, 2)) - output: 4
    
    É possível que o return seja apenas booleano (True/False)

Exercícios:

ex101: v
    Crie um programa que tenha uma função chamada voto() que vai
        receber como parâmetro o ano de nascimento de uma pessoa,
            retornando um valor literal, indicando se uma pessoa
                tem o voto Negado, Opcional ou Obrigatório.

ex102: v
    ... fatorial() que receba dois parâmetros: o primeiro que indique
        o número a calcular e o outro chamado show, que será um valor
            lógico (opcional) indicando se será ou não mostrado na tela
                o processo de cálculo do fatorial.

ex103: v
    ficha(), que receba dois parâmetros opcionais: o nome de um jogador
        e quantos gols ele marcou.
    
    O progrma deverá ser capaz dde mostrar a ficha do jogador, mesmo que
        algum dado não tenha sido informado corretamente.

ex104: v
    leiaint(), que vai funcionar de forma semelhante à funçâo input do
        python,só que fazendo a validação para aceitar apenas um valor
            numérico.

            Ex:
                n = leiaint('Digite um n')

ex105: v
    notas() quepode receber várias notas de alunos e vai retornar um
        dicionário	com as seguintes informações:

        - Quantidade de notas
        - A maior nota
        - A menor nota
        - A média da turma
        - A situação (opcional)
    
    Adicione também as docstrings da função.

ex106: v
    Faça um mini-sistema que utilize o Interactive Help do Python.
        O usuário vai digitar o comando e o manual vai aprecer. Quando
            o usuário digitar a palavra 'FIM', o programa se encerrará
    
    OBS: use cores.

End.Funções 2:

Nesta aula verenos mais sobre as funções e funções que recebem valores

Info:
    Help(function):
        É uma função usada no console do python que pode fornecer informação
            sobre qualquer função, biblioteca, etc... do python.
            
    print(input.__doc__):
        Básicamente a mesma coisa.

    docstring:
        adcione no começo da sua função para oferecer um manual sobre 
            ela através do comando help() ou input.__doc__

Parâmetro opcional:
    quando criar uma função é possível incluir parâmetro opcional:

    def calc(a, b, c=0)
        dessa forma c é opcional. Então se não for preenchido receberá 0

Escopo de váriaveis:
    Escopo é o local onde a váriavel foi determinada.

    fora de funções:
        Global:
            Continua com seu valor e pode ser chamada em qualquer lugar.
            
            Não é possível alterar seu valor dentro de uma função.

            Se a denominação de uma váriavel global for repetida dentro 
                da função, será criada uma váriavel local de mesmo nome.
            
            Se dentro da função, escreveres global 'var', você estará
                informando para não criar outra váriavel. E sim usar
                    a já existente váriavel global.
        
    dentro de funções:
        Local:
            Só pode ser chamada na def em que foi criada

Return:
    Se uma função tiver return, é possível armazenar uma informação
     da def fora dela, numa variável ou diretamente num output.
        da seguinte forma:

            def soma(a, b):
                return a + b

            s = soma(1, 2) - output: 3
            print(soma(2, 2)) - output: 4
    
    É possível que o return seja apenas booleano (True/False)

Exercícios:

ex101: v
    Crie um programa que tenha uma função chamada voto() que vai
        receber como parâmetro o ano de nascimento de uma pessoa,
            retornando um valor literal, indicando se uma pessoa
                tem o voto Negado, Opcional ou Obrigatório.

ex102: v
    ... fatorial() que receba dois parâmetros: o primeiro que indique
        o número a calcular e o outro chamado show, que será um valor
            lógico (opcional) indicando se será ou não mostrado na tela
                o processo de cálculo do fatorial.

ex103: v
    ficha(), que receba dois parâmetros opcionais: o nome de um jogador
        e quantos gols ele marcou.
    
    O progrma deverá ser capaz dde mostrar a ficha do jogador, mesmo que
        algum dado não tenha sido informado corretamente.

ex104: v
    leiaint(), que vai funcionar de forma semelhante à funçâo input do
        python,só que fazendo a validação para aceitar apenas um valor
            numérico.

            Ex:
                n = leiaint('Digite um n')

ex105: v
    notas() quepode receber várias notas de alunos e vai retornar um
        dicionário	com as seguintes informações:

        - Quantidade de notas
        - A maior nota
        - A menor nota
        - A média da turma
        - A situação (opcional)
    
    Adicione também as docstrings da função.

ex106: v
    Faça um mini-sistema que utilize o Interactive Help do Python.
        O usuário vai digitar o comando e o manual vai aprecer. Quando
            o usuário digitar a palavra 'FIM', o programa se encerrará
    
    OBS: use cores.

End.